@page "/User"
@using Shared.DTOs
@using Client.Services
@using Shared.Interfaces
@rendermode InteractiveServer
@inject IHttpClientFactory HttpClientFactory
@inject IRepository<UserDto> UserService

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<h3>User</h3>

@* <EditForm Model="NewUser" OnValidSubmit="AddUser">
	<DataAnnotationsValidator />
	<label>User Id</label>
	<InputText @bind-Value="NewUser.Id"></InputText>
	<label>Username</label>
	<InputText @bind-Value="NewUser.Username"></InputText>
	<button type="submit"Submit></button>
	<ValidationSummary />
</EditForm> *@

@* <Virtualize Items="@AllUsers">
	<p>
		@context.Username
	</p>
</Virtualize> *@

<EditForm Model="NewUser" OnValidSubmit="AddUser">
	<DataAnnotationsValidator />
	<MudInputLabel>Username</MudInputLabel>
	<MudTextField @bind-Value="NewUser.Username"></MudTextField>
	<MudButton Variant="Variant.Filled" Color="Color.Dark" ButtonType="ButtonType.Submit">Save</MudButton>
	<ValidationSummary />
</EditForm>

<MudList>
	<MudVirtualize Items="@AllUsers">
		<MudListItem>@context.Username</MudListItem>
	</MudVirtualize>
</MudList>

@code {

	public UserDto NewUser { get; set; } = new UserDto("", "");

	public List<UserDto> AllUsers { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		AllUsers.AddRange(await UserService.GetAllAsync());
	}

	private async Task AddUser()
	{
		await UserService.CreateAsync(NewUser);
		AllUsers.Clear();
		AllUsers.AddRange(await UserService.GetAllAsync());
	}

}