@page "/"
@using Shared.DTOs
@using Client.Services
@using Shared.Interfaces
@rendermode InteractiveServer
@inject IHttpClientFactory HttpClientFactory
@inject IRepository<UserDto> UserService

<h3>User</h3>

<br />
<EditForm Model="NewUser" OnValidSubmit="AddUser">
	<DataAnnotationsValidator />
	<MudInputLabel>Id</MudInputLabel>
	<MudTextField @bind-Value="NewUser.Id"></MudTextField>
	<MudInputLabel>Username</MudInputLabel>
	<MudTextField @bind-Value="NewUser.Username"></MudTextField>
	<MudButton Variant="Variant.Filled" Color="Color.Info" ButtonType="ButtonType.Submit">Save</MudButton>
	<ValidationSummary />
</EditForm>

<MudList>
	<MudVirtualize Items="@AllUsers">
		<MudListItem>@context.Username</MudListItem>
	</MudVirtualize>
</MudList>

@code {

	public required UserDto NewUser { get; set; } = new("","");

	private List<UserDto> AllUsers { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		// AllUsers.AddRange(await UserService.GetAllAsync());

		// var httpClient = HttpClientFactory.CreateClient("api");
		// var response = await httpClient.GetAsync("/users");
		// if (response.IsSuccessStatusCode)
		// {
		// 	var users = await response.Content.ReadFromJsonAsync<List<UserDto>>();
		// 	AllUsers.AddRange(users);
		// }

		AllUsers.AddRange(await UserService.GetAllAsync());
	}

	private async Task AddUser()
	{
		await UserService.CreateAsync(NewUser);
		AllUsers.Clear();
		AllUsers.AddRange(await UserService.GetAllAsync());

		NewUser.Username = "";
		NewUser.Id = "";
	}

}